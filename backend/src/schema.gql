# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Photo {
  id: Int!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  url: String!
}

"""Date custom scalar type"""
scalar Date

type Room {
  id: Int!
  createdAt: Date!
  updatedAt: Date!
  name: String!
  description: String!
  author: User!
  usersNumber: Int!
  photo: Photo
}

type Message {
  id: Int!
  createdAt: Date!
  updatedAt: Date!
  author: User!
  body: String!
}

type User {
  id: Int!
  createdAt: Date!
  updatedAt: Date!
  displayName: String!
  email: String!
  photo: String
  isAdmin: Boolean!
  isModerator: Boolean!
  isBanned: Boolean!
  joinedRooms: [Room!]!
  ignore: [User!]!
}

type Link {
  id: Int!
  createdAt: Date!
  updatedAt: Date!
  url: String!
  publisher: String!
  author: String
  title: String
  description: String
  photo: String
}

type Entry {
  id: Int!
  createdAt: Date!
  updatedAt: Date!
  url: String
  slug: String!
  title: String!
  publisher: String
  description: String!
  body: String
  author: User!
  room: Room!
  photo: Photo
  type: EntryType!
  comments: Comment!
  commentsNumber: Int
  voteScore: Int
  userVote: VoteValueEnum
  deleted: Boolean!
}

enum EntryType {
  LINK
  ARTICLE
  IMAGE
  VIDEO
}

enum VoteValueEnum {
  UP
  DOWN
  NONE
}

type Comment {
  id: Int!
  createdAt: Date!
  updatedAt: Date!
  author: User!
  body: String
  parentId: Int
  voteScore: Int
  userVote: VoteValueEnum
  deleted: Boolean!
}

type OnlineUser {
  userId: Int!
  roomId: Int!
  name: String!
  photo: String
  isAdmin: Boolean!
  isModerator: Boolean!
  isBanned: Boolean!
}

type VoteResult {
  userValue: Int!
  voteScore: Int!
}

type Query {
  me: User!
  user(id: Int!): User!
  onlineUsers(roomId: Int!): [OnlineUser!]!
  room(name: String!): Room!
  newRooms: [Room!]!
  searchRooms(name: String!): [Room!]!
  popularRooms(limit: Int!): [Room!]!
  initialMessages(roomId: Int!): [Message!]!
  entry(entryId: Int!): Entry!
  entries(queryData: QueryEntriesInput!): [Entry!]!
  checkLinkExsits(linkId: Int!, roomId: Int!): [Entry!]!
  metadata(url: String!): Link!
  comments(entryId: Int!): [Comment!]!
}

input QueryEntriesInput {
  roomName: String!
  limit: Int!
  offset: Int!
  sort: EntrySort!
}

enum EntrySort {
  NEW
  HOT
  BEST
}

type Mutation {
  loginUserWithFacebook(access_token: String!): Boolean!
  logout: Boolean!
  changeUserDisplayName(name: String!): User!
  ignoreUser(id: Int!): Boolean!
  removeIgnoreUser(id: Int!): Boolean!
  banUser(id: Int!): Boolean!
  deleteUserContent(id: Int!): Boolean!
  createRoom(newRoomData: NewRoomInput!): Room!
  joinRoom(id: Int!): Boolean!
  leaveRoom(id: Int!): Boolean!
  createMessage(newMessageData: NewMessageInput!): Message!
  deleteMessage(id: Int!): Boolean!
  createLink(newLinkData: NewLinkData!): Entry!
  createArticle(photo: Upload, newArticleData: NewArticleData!): Entry!
  deleteEntry(id: Int!): Boolean!
  uploadRoomPhoto(attachment: Upload!, roomId: Int!): Photo!
  vote(value: VoteValueEnum!, entryId: Int!): VoteResult!
  voteComment(value: VoteValueEnum!, commentId: Int!): VoteResult!
  createComment(commentData: NewCommentData!): Comment!
  deleteComment(commentId: Int!): Boolean!
  blacklistPublisher(entryId: Int!): Boolean!
  blacklistPublisherAndRemoveEntires(entryId: Int!): Boolean!
}

input NewRoomInput {
  name: String!
  description: String!
}

input NewMessageInput {
  roomId: Int!
  body: String!
}

input NewLinkData {
  title: String!
  description: String!
  linkId: Int!
  roomId: Int!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input NewArticleData {
  title: String!
  description: String!
  body: String!
  roomId: Int!
}

input NewCommentData {
  body: String!
  entryId: Int!
  parentId: Int
}

type Subscription {
  messageAdded(roomId: Int!): Message!
  messageDeleted(roomId: Int!): Message!
}
